"use strict";(self.webpackChunk_inversifyjs_framework_docs_site=self.webpackChunk_inversifyjs_framework_docs_site||[]).push([["3313"],{8700:function(e){e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"httpSidebar":[{"type":"category","label":"Introduction","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/framework/docs/introduction/getting-started","label":"Getting started","docId":"introduction/getting-started","unlisted":false}]},{"type":"category","label":"Fundamentals","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/framework/docs/fundamentals/controller","label":"Controller","docId":"fundamentals/controller","unlisted":false},{"type":"link","href":"/framework/docs/fundamentals/error-filter","label":"Error Filter","docId":"fundamentals/error-filter","unlisted":false},{"type":"link","href":"/framework/docs/fundamentals/guard","label":"Guard","docId":"fundamentals/guard","unlisted":false},{"type":"link","href":"/framework/docs/fundamentals/interceptor","label":"Interceptor","docId":"fundamentals/interceptor","unlisted":false},{"type":"link","href":"/framework/docs/fundamentals/middleware","label":"Middleware","docId":"fundamentals/middleware","unlisted":false},{"type":"link","href":"/framework/docs/fundamentals/pipe","label":"Pipe","docId":"fundamentals/pipe","unlisted":false}]},{"type":"category","label":"API","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/framework/docs/api/decorators","label":"Decorator","docId":"api/decorators","unlisted":false},{"type":"link","href":"/framework/docs/api/inversify-http-adapter/","label":"InversifyHttpAdapter","docId":"api/inversify-http-adapter/inversify-http-adapter","unlisted":false}]},{"type":"category","label":"Ecosystem","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Better Auth","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/framework/docs/ecosystem/better-auth/introduction","label":"Introduction","docId":"ecosystem/better-auth/introduction","unlisted":false},{"type":"category","label":"API Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/framework/docs/ecosystem/better-auth/api/better-auth","label":"BetterAuth","docId":"ecosystem/better-auth/api/better-auth","unlisted":false},{"type":"link","href":"/framework/docs/ecosystem/better-auth/api/user-session","label":"UserSession","docId":"ecosystem/better-auth/api/user-session","unlisted":false},{"type":"link","href":"/framework/docs/ecosystem/better-auth/api/decorators","label":"Parameter Decorators","docId":"ecosystem/better-auth/api/decorators","unlisted":false},{"type":"link","href":"/framework/docs/ecosystem/better-auth/api/container-modules","label":"Container Modules","docId":"ecosystem/better-auth/api/container-modules","unlisted":false}]}]},{"type":"link","href":"/framework/docs/ecosystem/logger","label":"Logger","docId":"ecosystem/logger","unlisted":false},{"type":"link","href":"/framework/docs/ecosystem/open-api","label":"Open API","docId":"ecosystem/open-api","unlisted":false},{"type":"link","href":"/framework/docs/ecosystem/validation","label":"Validation","docId":"ecosystem/validation","unlisted":false}]}]},"docs":{"api/decorators":{"id":"api/decorators","title":"Decorator","description":"This section covers Inversify HTTP decorators used to provide related metadata.","sidebar":"httpSidebar"},"api/inversify-http-adapter/inversify-http-adapter":{"id":"api/inversify-http-adapter/inversify-http-adapter","title":"InversifyHttpAdapter (Base Class)","description":"The base class all HTTP adapters extend (Express 4/5, Fastify, Hono, etc.). It wires controllers, guards, pipes, middleware, and interceptors into a working HTTP server. You generally consume its public methods from an adapter instance; if you are building a new adapter, implement the protected abstract methods described below.","sidebar":"httpSidebar"},"ecosystem/better-auth/api/better-auth":{"id":"ecosystem/better-auth/api/better-auth","title":"BetterAuth","description":"The BetterAuth type represents a configured Better Auth instance with full type safety based on the provided options.","sidebar":"httpSidebar"},"ecosystem/better-auth/api/container-modules":{"id":"ecosystem/better-auth/api/container-modules","title":"Container Modules","description":"Container modules provide a convenient way to set up Better Auth authentication in your InversifyJS dependency injection container. Each framework has its own specialized container module that automatically configures the necessary services, middleware, and controllers.","sidebar":"httpSidebar"},"ecosystem/better-auth/api/decorators":{"id":"ecosystem/better-auth/api/decorators","title":"Parameter Decorators","description":"Parameter decorators provide a convenient way to inject user session information directly into your controller methods. InversifyJS HTTP Better Auth provides framework-specific decorators that extract and parse authentication data from incoming requests.","sidebar":"httpSidebar"},"ecosystem/better-auth/api/user-session":{"id":"ecosystem/better-auth/api/user-session","title":"UserSession","description":"The UserSession interface provides type-safe access to the current user and session information from Better Auth.","sidebar":"httpSidebar"},"ecosystem/better-auth/introduction":{"id":"ecosystem/better-auth/introduction","title":"Introduction","description":"Better Auth is a comprehensive authentication library for TypeScript that provides secure, type-safe authentication with excellent developer experience. The InversifyJS HTTP framework provides seamless integration with Better Auth, allowing you to easily add authentication to your applications across Express, Express 4, Fastify, and Hono.","sidebar":"httpSidebar"},"ecosystem/logger":{"id":"ecosystem/logger","title":"Logger","description":"@inversifyjs/logger is a versatile and extensible logging library designed for TypeScript applications. It provides a simple and consistent API for logging messages at various levels (e.g., info, warn, error) and supports multiple logging transports, including console, file, http and stream logging.","sidebar":"httpSidebar"},"ecosystem/open-api":{"id":"ecosystem/open-api","title":"Open API","description":"The @inversifyjs/http-open-api package provides comprehensive OpenAPI 3.1 integration for InversifyJS HTTP applications. This powerful library enables you to automatically generate OpenAPI specifications and interactive Swagger UI documentation directly from your TypeScript controllers and schemas.","sidebar":"httpSidebar"},"ecosystem/validation":{"id":"ecosystem/validation","title":"Validation","description":"The @inversifyjs/http-validation package ecosystem provides comprehensive validation capabilities for InversifyJS HTTP applications. This powerful set of libraries enables you to validate request data using various validation approaches, from JSON Schema to decorator-based validation to modern TypeScript-first schema libraries.","sidebar":"httpSidebar"},"fundamentals/controller":{"id":"fundamentals/controller","title":"Controller","description":"Controllers are classes annotated with the @Controller() decorator. They group request handlers for a feature area. A controller defines a base path and one or more route handlers using method decorators.","sidebar":"httpSidebar"},"fundamentals/error-filter":{"id":"fundamentals/error-filter","title":"Error Filter","description":"Error filters allow you to catch and process errors that occur during request handling. They provide a centralized way to transform application errors into appropriate HTTP responses, keeping your controllers clean and focused on business logic.","sidebar":"httpSidebar"},"fundamentals/guard":{"id":"fundamentals/guard","title":"Guard","description":"Guards decide whether a request can continue. They run before middleware and handlers.","sidebar":"httpSidebar"},"fundamentals/interceptor":{"id":"fundamentals/interceptor","title":"Interceptor","description":"Interceptors run around your route handler\u2014before it executes and after it completes. They can inspect the request/response, short-circuit the flow, and even transform the handler result.","sidebar":"httpSidebar"},"fundamentals/middleware":{"id":"fundamentals/middleware","title":"Middleware","description":"Middleware run before or after your controller method, depending on the phase where you register them. They receive the native request/response types of the adapter you use.","sidebar":"httpSidebar"},"fundamentals/pipe":{"id":"fundamentals/pipe","title":"Pipe","description":"Pipes transform or validate individual parameters. They run immediately after a parameter is extracted from the request. A pipe can return a new value to replace the parameter, or throw an ErrorHttpResponse to stop processing.","sidebar":"httpSidebar"},"introduction/getting-started":{"id":"introduction/getting-started","title":"Getting started","description":"Install dependencies","sidebar":"httpSidebar"}}}}')}}]);