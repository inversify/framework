"use strict";(self.webpackChunk_inversifyjs_framework_docs_site=self.webpackChunk_inversifyjs_framework_docs_site||[]).push([["2935"],{3076:function(e,n,a){a.r(n),a.d(n,{metadata:()=>r,default:()=>u,frontMatter:()=>i,contentTitle:()=>c,toc:()=>d,assets:()=>l});var r=JSON.parse('{"id":"api/decorators","title":"Decorator","description":"This section covers Inversify HTTP OpenAPI decorators used to provide OpenAPI metadata to your controllers and operations.","source":"@site/openapi-docs/api/decorators.mdx","sourceDirName":"api","slug":"/api/decorators","permalink":"/framework/openapi/api/decorators","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Decorator"},"sidebar":"openApiSidebar","previous":{"title":"Philosophy","permalink":"/framework/openapi/introduction/philosophy"},"next":{"title":"SwaggerUiProvider","permalink":"/framework/openapi/api/swagger-ui-provider"}}'),s=a(6820),t=a(7588),o=a(5144);a(1323),a(818);let i={sidebar_position:1,title:"Decorator"},c="Decorators",l={},d=[{value:"Operation Metadata",id:"operation-metadata",level:2},{value:"OasDescription",id:"oasdescription",level:3},{value:"Example: adding a description to an operation",id:"example-adding-a-description-to-an-operation",level:4},{value:"OasSummary",id:"oassummary",level:3},{value:"Example: adding a summary to an operation",id:"example-adding-a-summary-to-an-operation",level:4},{value:"OasOperationId",id:"oasoperationid",level:3},{value:"Example: setting an operation ID",id:"example-setting-an-operation-id",level:4},{value:"OasDeprecated",id:"oasdeprecated",level:3},{value:"Example: marking an operation as deprecated",id:"example-marking-an-operation-as-deprecated",level:4},{value:"OasTag",id:"oastag",level:3},{value:"Example: adding tags to an operation",id:"example-adding-tags-to-an-operation",level:4},{value:"OasExternalDocs",id:"oasexternaldocs",level:3},{value:"Example: linking to external documentation",id:"example-linking-to-external-documentation",level:4},{value:"Request and Response Documentation",id:"request-and-response-documentation",level:2},{value:"OasRequestBody",id:"oasrequestbody",level:3},{value:"Example: documenting a request body",id:"example-documenting-a-request-body",level:4},{value:"OasResponse",id:"oasresponse",level:3},{value:"Example: documenting multiple response types",id:"example-documenting-multiple-response-types",level:4},{value:"OasParameter",id:"oasparameter",level:3},{value:"Example: documenting a query parameter",id:"example-documenting-a-query-parameter",level:4},{value:"Security and Server Configuration",id:"security-and-server-configuration",level:2},{value:"OasSecurity",id:"oassecurity",level:3},{value:"Example: requiring bearer authentication",id:"example-requiring-bearer-authentication",level:4},{value:"OasServer",id:"oasserver",level:3},{value:"Example: specifying server information",id:"example-specifying-server-information",level:4},{value:"Schema Definition",id:"schema-definition",level:2},{value:"OasSchema",id:"oasschema",level:3},{value:"OasSchemaDecoratorOptions",id:"oasschemadecoratoroptions",level:4},{value:"Example: defining a schema class",id:"example-defining-a-schema-class",level:4},{value:"OasSchemaProperty",id:"oasschemaproperty",level:3},{value:"OasSchemaOptionalProperty",id:"oasschemaoptionalproperty",level:3},{value:"Example: using schemas with controllers",id:"example-using-schemas-with-controllers",level:4},{value:"Comprehensive Example",id:"comprehensive-example",level:2},{value:"Schema Reference Functions",id:"schema-reference-functions",level:2}];function p(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"decorators",children:"Decorators"})}),"\n",(0,s.jsx)(n.p,{children:"This section covers Inversify HTTP OpenAPI decorators used to provide OpenAPI metadata to your controllers and operations."}),"\n",(0,s.jsx)(n.h2,{id:"operation-metadata",children:"Operation Metadata"}),"\n",(0,s.jsx)(n.p,{children:"These decorators provide metadata for individual API operations (methods)."}),"\n",(0,s.jsx)(n.h3,{id:"oasdescription",children:"OasDescription"}),"\n",(0,s.jsx)(n.p,{children:"Adds a description to an API operation, providing detailed information about what the operation does."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"OasDescription(content: string): MethodDecorator\n"})}),"\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"content (string): A detailed description of the operation."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-adding-a-description-to-an-operation",children:"Example: adding a description to an operation"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:"@Controller('/messages')\nexport class DescriptionController {\n  @OasDescription('Retrieves a welcome message')\n  @Get()\n  public async getMessage(): Promise<MessageResult> {\n    return {\n      message: 'Hello, World!',\n    };\n  }\n}\n"}),"\n",(0,s.jsx)(n.h3,{id:"oassummary",children:"OasSummary"}),"\n",(0,s.jsx)(n.p,{children:"Adds a brief summary to an API operation, providing a short description of what the operation does."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"OasSummary(summary: string): ClassDecorator & MethodDecorator\n"})}),"\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"summary (string): A brief summary of the operation or controller."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Scope: Can be applied to both controller classes and individual methods."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-adding-a-summary-to-an-operation",children:"Example: adding a summary to an operation"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:"@Controller('/messages')\nexport class SummaryController {\n  @OasSummary('Get welcome message')\n  @Get()\n  public async getMessage(): Promise<MessageResult> {\n    return {\n      message: 'Hello, World!',\n    };\n  }\n}\n"}),"\n",(0,s.jsx)(n.h3,{id:"oasoperationid",children:"OasOperationId"}),"\n",(0,s.jsx)(n.p,{children:"Sets a unique identifier for the API operation, useful for code generation and tooling."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"OasOperationId(content: string): MethodDecorator\n"})}),"\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"content (string): A unique identifier for the operation."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-setting-an-operation-id",children:"Example: setting an operation ID"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:"@Controller('/messages')\nexport class OperationIdController {\n  @OasOperationId('getWelcomeMessage')\n  @Get()\n  public async getMessage(): Promise<MessageResult> {\n    return {\n      message: 'Hello, World!',\n    };\n  }\n}\n"}),"\n",(0,s.jsx)(n.h3,{id:"oasdeprecated",children:"OasDeprecated"}),"\n",(0,s.jsx)(n.p,{children:"Marks an API operation as deprecated, indicating it will be removed in future versions."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"OasDeprecated(): MethodDecorator\n"})}),"\n",(0,s.jsx)(n.h4,{id:"example-marking-an-operation-as-deprecated",children:"Example: marking an operation as deprecated"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:"@Controller('/messages')\nexport class DeprecatedController {\n  @OasDeprecated()\n  @Get()\n  public async getOldMessage(): Promise<MessageResult> {\n    return {\n      message: 'This endpoint is deprecated!',\n    };\n  }\n}\n"}),"\n",(0,s.jsx)(n.h3,{id:"oastag",children:"OasTag"}),"\n",(0,s.jsx)(n.p,{children:"Adds tags to an API operation for grouping and organization in documentation."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"OasTag(content: string): MethodDecorator\n"})}),"\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"content (string): The tag name to associate with the operation."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Multiple tags: You can apply multiple ",(0,s.jsx)(n.code,{children:"@OasTag"})," decorators to the same operation."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-adding-tags-to-an-operation",children:"Example: adding tags to an operation"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:"@Controller('/messages')\nexport class TagController {\n  @OasTag('messages')\n  @OasTag('greetings')\n  @Get()\n  public async getMessage(): Promise<MessageResult> {\n    return {\n      message: 'Hello, World!',\n    };\n  }\n}\n"}),"\n",(0,s.jsx)(n.h3,{id:"oasexternaldocs",children:"OasExternalDocs"}),"\n",(0,s.jsx)(n.p,{children:"Links to external documentation for an API operation."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"OasExternalDocs(content: OpenApi3Dot1ExternalDocumentationObject): MethodDecorator\n"})}),"\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"content (OpenApi3Dot1ExternalDocumentationObject): External documentation object containing description and URL."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-linking-to-external-documentation",children:"Example: linking to external documentation"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:"@Controller('/messages')\nexport class ExternalDocsController {\n  @OasExternalDocs({\n    description: 'Find more info here',\n    url: 'https://example.com/docs',\n  })\n  @Get()\n  public async getMessage(): Promise<MessageResult> {\n    return {\n      message: 'Hello, World!',\n    };\n  }\n}\n"}),"\n",(0,s.jsx)(n.h2,{id:"request-and-response-documentation",children:"Request and Response Documentation"}),"\n",(0,s.jsx)(n.p,{children:"These decorators document the request and response structures of your API operations."}),"\n",(0,s.jsx)(n.h3,{id:"oasrequestbody",children:"OasRequestBody"}),"\n",(0,s.jsx)(n.p,{children:"Documents the request body structure and content types for an API operation."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"OasRequestBody(\n  requestBody:\n    | OpenApi3Dot1RequestBodyObject\n    | OpenApi3Dot1ReferenceObject\n    | BuildOpenApiBlockFunction<\n        OpenApi3Dot1RequestBodyObject | OpenApi3Dot1ReferenceObject\n      >,\n): MethodDecorator\n"})}),"\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["requestBody: Request body specification or a function that builds it using schema references. See ",(0,s.jsx)(n.a,{href:"#schema-reference-functions",children:"Schema Reference Functions"})," for more information about using the ",(0,s.jsx)(n.code,{children:"BuildOpenApiBlockFunction"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-documenting-a-request-body",children:"Example: documenting a request body"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:"@Controller('/messages')\nexport class BodyController {\n  @OasRequestBody({\n    content: {\n      'application/json': {\n        schema: {\n          properties: {\n            message: { type: 'string' },\n          },\n          required: ['message'],\n          type: 'object',\n        },\n      },\n    },\n  })\n  @Post()\n  public async createMessage(@Body() body: BodyPayload): Promise<BodyResult> {\n    return {\n      message: body.message,\n    };\n  }\n}\n"}),"\n",(0,s.jsx)(n.h3,{id:"oasresponse",children:"OasResponse"}),"\n",(0,s.jsx)(n.p,{children:"Documents possible response structures and status codes for an API operation."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"OasResponse(\n  code: HttpStatusCode,\n  response:\n    | OpenApi3Dot1ResponseObject\n    | BuildOpenApiBlockFunction<OpenApi3Dot1ResponseObject>,\n): MethodDecorator\n"})}),"\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"code (HttpStatusCode): The HTTP status code for this response."}),"\n",(0,s.jsxs)(n.li,{children:["response: Response specification or a function that builds it using schema references. See ",(0,s.jsx)(n.a,{href:"#schema-reference-functions",children:"Schema Reference Functions"})," for more information about using the ",(0,s.jsx)(n.code,{children:"BuildOpenApiBlockFunction"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Multiple responses: You can apply multiple ",(0,s.jsx)(n.code,{children:"@OasResponse"})," decorators to document different status codes."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-documenting-multiple-response-types",children:"Example: documenting multiple response types"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:"@Controller('/messages')\nexport class ResponseController {\n  @OasResponse(HttpStatusCode.OK, {\n    content: {\n      'application/json': {\n        schema: {\n          properties: {\n            message: { type: 'string' },\n          },\n          required: ['message'],\n          type: 'object',\n        },\n      },\n    },\n    description: 'Successful response',\n  })\n  @OasResponse(HttpStatusCode.NOT_FOUND, {\n    content: {\n      'application/json': {\n        schema: {\n          properties: {\n            error: { type: 'string' },\n          },\n          required: ['error'],\n          type: 'object',\n        },\n      },\n    },\n    description: 'Message not found',\n  })\n  @Get()\n  public async getMessage(): Promise<MessageResult> {\n    return {\n      message: 'Hello, World!',\n    };\n  }\n}\n"}),"\n",(0,s.jsx)(n.h3,{id:"oasparameter",children:"OasParameter"}),"\n",(0,s.jsx)(n.p,{children:"Documents parameters for an API operation (query, path, header, or cookie parameters)."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"OasParameter(\n  parameter:\n    | OpenApi3Dot1ParameterObject\n    | OpenApi3Dot1ReferenceObject\n    | BuildOpenApiBlockFunction<\n        OpenApi3Dot1ParameterObject | OpenApi3Dot1ReferenceObject\n      >,\n): MethodDecorator\n"})}),"\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["parameter: Parameter specification or a function that builds it using schema references. See ",(0,s.jsx)(n.a,{href:"#schema-reference-functions",children:"Schema Reference Functions"})," for more information about using the ",(0,s.jsx)(n.code,{children:"BuildOpenApiBlockFunction"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Multiple parameters: You can apply multiple ",(0,s.jsx)(n.code,{children:"@OasParameter"})," decorators to document different parameters."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-documenting-a-query-parameter",children:"Example: documenting a query parameter"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:"@Controller('/messages')\nexport class ParameterController {\n  @OasParameter({\n    description: 'The ID of the user',\n    in: 'query',\n    name: 'userId',\n    required: true,\n    schema: {\n      type: 'string',\n    },\n  })\n  @Get()\n  public async getMessage(): Promise<MessageResult> {\n    return {\n      message: 'Hello, World!',\n      userId: '123',\n    };\n  }\n}\n"}),"\n",(0,s.jsx)(n.h2,{id:"security-and-server-configuration",children:"Security and Server Configuration"}),"\n",(0,s.jsx)(n.p,{children:"These decorators configure security requirements and server information."}),"\n",(0,s.jsx)(n.h3,{id:"oassecurity",children:"OasSecurity"}),"\n",(0,s.jsx)(n.p,{children:"Specifies security requirements for an API operation."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"OasSecurity(content: OpenApi3Dot1SecurityRequirementObject): MethodDecorator\n"})}),"\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"content (OpenApi3Dot1SecurityRequirementObject): Security requirement specification."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-requiring-bearer-authentication",children:"Example: requiring bearer authentication"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:"@Controller('/messages')\nexport class SecurityController {\n  @OasSecurity({\n    bearerAuth: [],\n  })\n  @Get()\n  public async getSecureMessage(): Promise<MessageResult> {\n    return {\n      message: 'This is a secure message!',\n    };\n  }\n}\n"}),"\n",(0,s.jsx)(n.h3,{id:"oasserver",children:"OasServer"}),"\n",(0,s.jsx)(n.p,{children:"Specifies server information for a controller or specific operation."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"OasServer(server: OpenApi3Dot1ServerObject): ClassDecorator & MethodDecorator\n"})}),"\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"server (OpenApi3Dot1ServerObject): Server specification including URL and description."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Scope: Can be applied to both controller classes and individual methods."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-specifying-server-information",children:"Example: specifying server information"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:"@OasServer({\n  description: 'Development server',\n  url: 'http://localhost:3000',\n})\n@Controller('/messages')\nexport class ServerController {\n  @OasServer({\n    description: 'Production server for this endpoint',\n    url: 'https://api.example.com',\n  })\n  @Get()\n  public async getMessage(): Promise<MessageResult> {\n    return {\n      message: 'Hello, World!',\n    };\n  }\n}\n"}),"\n",(0,s.jsx)(n.h2,{id:"schema-definition",children:"Schema Definition"}),"\n",(0,s.jsx)(n.p,{children:"These decorators are used to define and document data models."}),"\n",(0,s.jsx)(n.h3,{id:"oasschema",children:"OasSchema"}),"\n",(0,s.jsx)(n.p,{children:"Defines OpenAPI schema metadata for a class, making it available for reference in other decorators."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"OasSchema(\n  schema?:\n    | OpenApi3Dot1SchemaObject\n    | BuildOpenApiBlockFunction<OpenApi3Dot1SchemaObject>,\n  options?: OasSchemaDecoratorOptions,\n): ClassDecorator\n"})}),"\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["schema (optional): Schema specification or a function that builds it. See ",(0,s.jsx)(n.a,{href:"#schema-reference-functions",children:"Schema Reference Functions"})," for more information about using the ",(0,s.jsx)(n.code,{children:"BuildOpenApiBlockFunction"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["options (optional): Additional options for schema generation. See ",(0,s.jsx)(n.a,{href:"#oasschemadecoratoroptions",children:"OasSchemaDecoratorOptions"})," for available options."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"oasschemadecoratoroptions",children:"OasSchemaDecoratorOptions"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"OasSchemaDecoratorOptions"})," interface provides additional configuration options for the ",(0,s.jsx)(n.code,{children:"@OasSchema"})," decorator:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface OasSchemaDecoratorOptions {\n  customAttributes?: OpenApi3Dot1SchemaObject;\n  name?: string;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Properties:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"customAttributes"})," (optional): Custom OpenAPI schema attributes to merge with the generated schema. This allows you to add or override specific schema properties."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"})," (optional): Custom name for the schema reference. If not provided, the class name will be used."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-defining-a-schema-class",children:"Example: defining a schema class"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:"@OasSchema({\n  description: 'A user in the system',\n  title: 'User',\n})\nexport class User {\n  @OasSchemaProperty({\n    description: 'The unique identifier of the user',\n    type: 'string',\n  })\n  public id!: string;\n\n  @OasSchemaProperty({\n    description: 'The name of the user',\n    type: 'string',\n  })\n  public name!: string;\n\n  @OasSchemaProperty({\n    description: 'The email address of the user',\n    format: 'email',\n    type: 'string',\n  })\n  public email!: string;\n\n  @OasSchemaOptionalProperty({\n    description: 'The age of the user',\n    minimum: 0,\n    type: 'integer',\n  })\n  public age?: number;\n\n  @OasSchemaOptionalProperty({\n    description: 'Whether the user is active',\n    type: 'boolean',\n  })\n  public isActive?: boolean;\n}\n"}),"\n",(0,s.jsx)(n.h3,{id:"oasschemaproperty",children:"OasSchemaProperty"}),"\n",(0,s.jsx)(n.p,{children:"Marks a class property as required in the OpenAPI schema."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"OasSchemaProperty(\n  schema?:\n    | OpenApi3Dot1SchemaObject\n    | BuildOpenApiBlockFunction<OpenApi3Dot1SchemaObject>,\n): PropertyDecorator\n"})}),"\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["schema (optional): Schema specification for the property. See ",(0,s.jsx)(n.a,{href:"#schema-reference-functions",children:"Schema Reference Functions"})," for more information about using the ",(0,s.jsx)(n.code,{children:"BuildOpenApiBlockFunction"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"oasschemaoptionalproperty",children:"OasSchemaOptionalProperty"}),"\n",(0,s.jsx)(n.p,{children:"Marks a class property as optional in the OpenAPI schema."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"OasSchemaOptionalProperty(\n  schema?:\n    | OpenApi3Dot1SchemaObject\n    | BuildOpenApiBlockFunction<OpenApi3Dot1SchemaObject>,\n): PropertyDecorator\n"})}),"\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["schema (optional): Schema specification for the property. See ",(0,s.jsx)(n.a,{href:"#schema-reference-functions",children:"Schema Reference Functions"})," for more information about using the ",(0,s.jsx)(n.code,{children:"BuildOpenApiBlockFunction"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-using-schemas-with-controllers",children:"Example: using schemas with controllers"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:"@Controller('/users')\nexport class UserController {\n  @OasRequestBody((toSchema: ToSchemaFunction) => ({\n    content: {\n      'application/json': {\n        schema: toSchema(CreateUserRequest),\n      },\n    },\n    description: 'User data to create',\n    required: true,\n  }))\n  @OasResponse(HttpStatusCode.OK, (toSchema: ToSchemaFunction) => ({\n    content: {\n      'application/json': {\n        schema: toSchema(User),\n      },\n    },\n    description: 'The created user',\n  }))\n  @Post()\n  public async createUser(@Body() userData: CreateUserRequest): Promise<User> {\n    return {\n      email: userData.email,\n      id: '123',\n      name: userData.name,\n      ...(userData.age !== undefined && { age: userData.age }),\n    };\n  }\n\n  @OasResponse(HttpStatusCode.OK, (toSchema: ToSchemaFunction) => ({\n    content: {\n      'application/json': {\n        schema: {\n          items: toSchema(User),\n          type: 'array',\n        },\n      },\n    },\n    description: 'The created user',\n  }))\n  @Get()\n  public async getUsers(): Promise<User[]> {\n    return [\n      {\n        age: 30,\n        email: 'john@example.com',\n        id: '1',\n        name: 'John Doe',\n      },\n      {\n        email: 'jane@example.com',\n        id: '2',\n        name: 'Jane Smith',\n      },\n    ];\n  }\n}\n"}),"\n",(0,s.jsx)(n.h2,{id:"comprehensive-example",children:"Comprehensive Example"}),"\n",(0,s.jsx)(n.p,{children:"Here's a comprehensive example showing multiple OpenAPI decorators working together:"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:"@OasServer({\n  description: 'Development server',\n  url: 'http://localhost:3000',\n})\n@Controller('/products')\nexport class ProductController {\n  @OasSummary('Get all products')\n  @OasDescription('Retrieves a list of all products in the inventory')\n  @OasOperationId('getAllProducts')\n  @OasTag('products')\n  @OasTag('inventory')\n  @OasExternalDocs({\n    description: 'Find more info about products API',\n    url: 'https://example.com/docs/products',\n  })\n  @OasResponse(HttpStatusCode.OK, (toSchema: ToSchemaFunction) => ({\n    content: {\n      'application/json': {\n        schema: {\n          items: toSchema(Product),\n          type: 'array',\n        },\n      },\n    },\n    description: 'List of products',\n  }))\n  @Get()\n  public async getAllProducts(): Promise<Product[]> {\n    return [\n      {\n        description: 'A great laptop',\n        id: '1',\n        name: 'Laptop',\n        price: 999.99,\n      },\n      {\n        id: '2',\n        name: 'Mouse',\n        price: 29.99,\n      },\n    ];\n  }\n\n  @OasSummary('Get product by ID')\n  @OasDescription('Retrieves a specific product by its unique identifier')\n  @OasOperationId('getProductById')\n  @OasTag('products')\n  @OasParameter({\n    description: 'The unique identifier of the product',\n    in: 'path',\n    name: 'id',\n    required: true,\n    schema: {\n      type: 'string',\n    },\n  })\n  @OasResponse(HttpStatusCode.OK, (toSchema: ToSchemaFunction) => ({\n    content: {\n      'application/json': {\n        schema: toSchema(Product),\n      },\n    },\n    description: 'Product details',\n  }))\n  @OasResponse(HttpStatusCode.NOT_FOUND, (toSchema: ToSchemaFunction) => ({\n    content: {\n      'application/json': {\n        schema: toSchema(ErrorResponse),\n      },\n    },\n    description: 'Product not found',\n  }))\n  @Get('/:id')\n  public async getProductById(\n    @Params() params: { id: string },\n  ): Promise<Product> {\n    return {\n      description: 'A great laptop',\n      id: params.id,\n      name: 'Laptop',\n      price: 999.99,\n    };\n  }\n\n  @OasSummary('Create a new product')\n  @OasDescription('Creates a new product in the inventory')\n  @OasOperationId('createProduct')\n  @OasTag('products')\n  @OasTag('inventory')\n  @OasSecurity({\n    bearerAuth: [],\n  })\n  @OasRequestBody((toSchema: ToSchemaFunction) => ({\n    content: {\n      'application/json': {\n        schema: toSchema(CreateProductRequest),\n      },\n    },\n    description: 'Product data to create',\n    required: true,\n  }))\n  @OasResponse(HttpStatusCode.CREATED, (toSchema: ToSchemaFunction) => ({\n    content: {\n      'application/json': {\n        schema: toSchema(Product),\n      },\n    },\n    description: 'Product created successfully',\n  }))\n  @OasResponse(HttpStatusCode.BAD_REQUEST, (toSchema: ToSchemaFunction) => ({\n    content: {\n      'application/json': {\n        schema: toSchema(ErrorResponse),\n      },\n    },\n    description: 'Invalid product data',\n  }))\n  @Post()\n  public async createProduct(\n    @Body() productData: CreateProductRequest,\n  ): Promise<Product> {\n    return {\n      id: '123',\n      name: productData.name,\n      price: productData.price,\n      ...(productData.description !== undefined && {\n        description: productData.description,\n      }),\n    };\n  }\n\n  @OasSummary('Get legacy product data')\n  @OasDescription(\n    'This endpoint is deprecated and will be removed in a future version',\n  )\n  @OasOperationId('getLegacyProduct')\n  @OasTag('products')\n  @OasTag('legacy')\n  @OasDeprecated()\n  @OasResponse(HttpStatusCode.OK, {\n    content: {\n      'application/json': {\n        schema: {\n          properties: {\n            data: { type: 'string' },\n          },\n          required: ['data'],\n          type: 'object',\n        },\n      },\n    },\n    description: 'Legacy product data',\n  })\n  @Get('/legacy')\n  public async getLegacyProduct(): Promise<{ data: string }> {\n    return {\n      data: 'This is legacy data',\n    };\n  }\n}\n"}),"\n",(0,s.jsx)(n.h2,{id:"schema-reference-functions",children:"Schema Reference Functions"}),"\n",(0,s.jsxs)(n.p,{children:["When using decorators that accept a ",(0,s.jsx)(n.code,{children:"BuildOpenApiBlockFunction"}),", you have access to a ",(0,s.jsx)(n.code,{children:"toSchema"})," function that allows you to reference schema classes:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"@OasRequestBody((toSchema) => ({\n  content: {\n    'application/json': {\n      schema: toSchema(MySchemaClass),\n    },\n  },\n  required: true,\n}))\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"MySchemaClass"})," should be properly decorated with ",(0,s.jsx)(n.code,{children:"@OasSchema"})," and its properties with ",(0,s.jsx)(n.code,{children:"@OasSchemaProperty"})," or ",(0,s.jsx)(n.code,{children:"@OasSchemaOptionalProperty"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This approach provides type safety and automatic schema resolution for your OpenAPI documentation."})]})}function u(e={}){let{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},818:function(e,n,a){a.d(n,{A:()=>t});var r=a(6820);a(5080);var s=a(929);function t({children:e,hidden:n,className:a}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)("tabItem_AhtS",a),hidden:n,children:e})}},1323:function(e,n,a){a.d(n,{A:()=>O});var r=a(6820),s=a(5080),t=a(929),o=a(5907),i=a(8428),c=a(3357),l=a(8437),d=a(1817),p=a(998),u=a(8482);function h(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}var g=a(4791);function x({className:e,block:n,selectedValue:a,selectValue:s,tabValues:o}){let c=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),d=e=>{let n=e.currentTarget,r=o[c.indexOf(n)].value;r!==a&&(l(n),s(r))},p=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let a=c.indexOf(e.currentTarget)+1;n=c[a]??c[0];break}case"ArrowLeft":{let a=c.indexOf(e.currentTarget)-1;n=c[a]??c[c.length-1]}}n?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:o.map(({value:e,label:n,attributes:s})=>(0,r.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{c.push(e)},onKeyDown:p,onClick:d,...s,className:(0,t.A)("tabs__item","tabItem_NEq3",s?.className,{"tabs__item--active":a===e}),children:n??e},e))})}function j({lazy:e,children:n,selectedValue:a}){let o=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){let e=o.find(e=>e.props.value===a);return e?(0,s.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:o.map((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a}))})}function f(e){let n=function(e){let n,{defaultValue:a,queryString:r=!1,groupId:t}=e,o=function(e){let{values:n,children:a}=e;return(0,s.useMemo)(()=>{let e=n??h(a).map(({props:{value:e,label:n,attributes:a,default:r}})=>({value:e,label:n,attributes:a,default:r})),r=(0,p.XI)(e,(e,n)=>e.value===n.value);if(r.length>0)throw Error(`Docusaurus error: Duplicate values "${r.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[n,a])}(e),[i,g]=(0,s.useState)(()=>(function({defaultValue:e,tabValues:n}){if(0===n.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}let a=n.find(e=>e.default)??n[0];if(!a)throw Error("Unexpected error: 0 tabValues");return a.value})({defaultValue:a,tabValues:o})),[x,j]=function({queryString:e=!1,groupId:n}){let a=(0,c.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,d.aZ)(r),(0,s.useCallback)(e=>{if(!r)return;let n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})},[r,a])]}({queryString:r,groupId:t}),[f,O]=function({groupId:e}){let n=e?`docusaurus.tab.${e}`:null,[a,r]=(0,u.Dv)(n);return[a,(0,s.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:t}),y=m({value:n=x??f,tabValues:o})?n:null;return(0,l.A)(()=>{y&&g(y)},[y]),{selectedValue:i,selectValue:(0,s.useCallback)(e=>{if(!m({value:e,tabValues:o}))throw Error(`Can't select invalid tab value=${e}`);g(e),j(e),O(e)},[j,O,o]),tabValues:o}}(e);return(0,r.jsxs)("div",{className:(0,t.A)(o.G.tabs.container,"tabs-container","tabList_xt8g"),children:[(0,r.jsx)(x,{...n,...e}),(0,r.jsx)(j,{...n,...e})]})}function O(e){let n=(0,g.A)();return(0,r.jsx)(f,{...e,children:h(e.children)},String(n))}}}]);