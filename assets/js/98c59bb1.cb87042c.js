"use strict";(self.webpackChunk_inversifyjs_framework_docs_site=self.webpackChunk_inversifyjs_framework_docs_site||[]).push([["4215"],{3848:function(e,r,t){t.r(r),t.d(r,{frontMatter:()=>p,toc:()=>o,default:()=>u,metadata:()=>a,assets:()=>l,contentTitle:()=>d});var a=JSON.parse('{"id":"fundamentals/pipe","title":"Pipe","description":"Pipes transform or validate individual parameters. They run immediately after a parameter is extracted from the request. A pipe can return a new value to replace the parameter, or throw an ErrorHttpResponse to stop processing.","source":"@site/docs/fundamentals/pipe.mdx","sourceDirName":"fundamentals","slug":"/fundamentals/pipe","permalink":"/framework/docs/fundamentals/pipe","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Pipe"},"sidebar":"httpSidebar","previous":{"title":"Middleware","permalink":"/framework/docs/fundamentals/middleware"},"next":{"title":"Decorator","permalink":"/framework/docs/api/decorators"}}'),n=t(6820),i=t(7588),s=t(5340);let p={sidebar_position:6,title:"Pipe"},d="Pipe",l={},o=[{value:"execute",id:"execute",level:2},{value:"Example: Parse a number with validation",id:"example-parse-a-number-with-validation",level:2},{value:"Attaching pipes",id:"attaching-pipes",level:2}];function c(e){let r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"pipe",children:"Pipe"})}),"\n",(0,n.jsxs)(r.p,{children:["Pipes transform or validate individual parameters. They run immediately after a parameter is extracted from the request. A pipe can return a new value to replace the parameter, or throw an ",(0,n.jsx)(r.code,{children:"ErrorHttpResponse"})," to stop processing."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"interface Pipe<TInput = unknown, TOutput = unknown> {\n  execute(input: TInput, metadata: PipeMetadata): Promise<TOutput> | TOutput;\n}\n"})}),"\n",(0,n.jsx)(r.h2,{id:"execute",children:"execute"}),"\n",(0,n.jsxs)(r.p,{children:["Processes the input and returns the transformed value. If the input is invalid, throw an ",(0,n.jsx)(r.code,{children:"ErrorHttpResponse"})," to end the request early."]}),"\n",(0,n.jsx)(r.h2,{id:"example-parse-a-number-with-validation",children:"Example: Parse a number with validation"}),"\n",(0,n.jsxs)(r.p,{children:["A simple pipe that parses the input into a number and rejects invalid values with a ",(0,n.jsx)(r.code,{children:"400 Bad Request"}),"."]}),"\n",(0,n.jsx)(s.A,{language:"ts",children:"export class ParseNumberPipe implements Pipe<unknown, number> {\n  public execute(input: unknown): number {\n    const parsed: number = Number(input);\n\n    if (Number.isNaN(parsed)) {\n      throw new BadRequestHttpResponse('Invalid number');\n    }\n\n    return parsed;\n  }\n}"}),"\n",(0,n.jsx)(r.h2,{id:"attaching-pipes",children:"Attaching pipes"}),"\n",(0,n.jsxs)(r.p,{children:["Use parameter decorators to attach pipes where you need them. ",(0,n.jsx)(r.code,{children:"Body"}),", ",(0,n.jsx)(r.code,{children:"Params"}),", ",(0,n.jsx)(r.code,{children:"Query"}),", ",(0,n.jsx)(r.code,{children:"Headers"}),", ",(0,n.jsx)(r.code,{children:"Cookies"}),", ",(0,n.jsx)(r.code,{children:"Request"}),", and ",(0,n.jsx)(r.code,{children:"Response"})," all accept pipes."]}),"\n",(0,n.jsx)(r.p,{children:"The adapter applies global pipes first, then parameter-level pipes, before calling your controller method."}),"\n",(0,n.jsxs)(r.p,{children:["Global pipes can be registered using the ",(0,n.jsx)(r.a,{href:"../../api/inversify-http-adapter#useglobalpipe",children:"InversifyHttpAdapter"}),"."]})]})}function u(e={}){let{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}}}]);