"use strict";(self.webpackChunk_inversifyjs_framework_docs_site=self.webpackChunk_inversifyjs_framework_docs_site||[]).push([["1353"],{9406:function(e,s,n){n.r(s),n.d(s,{metadata:()=>i,default:()=>m,frontMatter:()=>t,contentTitle:()=>h,toc:()=>d,assets:()=>o});var i=JSON.parse('{"id":"faq/extending-class-schemas","title":"Extending class schemas","description":"When working with OpenAPI schemas in InversifyJS HTTP, you might need to create schemas that extend from a base schema. This is useful for creating inheritance hierarchies where child schemas include all properties from a parent schema plus additional properties.","source":"@site/openapi-docs/faq/extending-class-schemas.mdx","sourceDirName":"faq","slug":"/faq/extending-class-schemas","permalink":"/framework/openapi/faq/extending-class-schemas","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Extending class schemas"},"sidebar":"openApiSidebar","previous":{"title":"SwaggerUiProvider","permalink":"/framework/openapi/api/swagger-ui-provider"}}'),a=n(6820),c=n(7588),r=n(5144);let t={sidebar_position:1,title:"Extending class schemas"},h="Extending Class Schemas",o={},d=[{value:"Basic Schema Extension",id:"basic-schema-extension",level:2},{value:"How It Works",id:"how-it-works",level:2}];function l(e){let s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"extending-class-schemas",children:"Extending Class Schemas"})}),"\n",(0,a.jsx)(s.p,{children:"When working with OpenAPI schemas in InversifyJS HTTP, you might need to create schemas that extend from a base schema. This is useful for creating inheritance hierarchies where child schemas include all properties from a parent schema plus additional properties."}),"\n",(0,a.jsx)(s.h2,{id:"basic-schema-extension",children:"Basic Schema Extension"}),"\n",(0,a.jsxs)(s.p,{children:["To extend a class schema, you can use the ",(0,a.jsx)(s.code,{children:"@OasSchema"})," decorator with a function that takes a ",(0,a.jsx)(s.code,{children:"ToSchemaFunction"})," parameter. This function allows you to reference other schema classes."]}),"\n",(0,a.jsx)(r.A,{language:"ts",children:"@OasSchema()\nexport class BaseSchema {\n  @OasSchemaProperty({\n    description: 'A common string property',\n    type: 'string',\n  })\n  public foo!: string;\n}\n\n@OasSchema((toSchema: ToSchemaFunction) => toSchema(BaseSchema), {\n  customAttributes: {\n    unevaluatedProperties: false,\n  },\n})\nexport class ExtendedSchema extends BaseSchema {\n  @OasSchemaProperty({\n    description: 'An additional property in the extended schema',\n    type: 'string',\n  })\n  public bar!: string;\n\n  @OasSchemaProperty({\n    description: 'A numeric property in the extended schema',\n    minimum: 0,\n    type: 'number',\n  })\n  public count!: number;\n}\n"}),"\n",(0,a.jsx)(s.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Base Schema"}),": The ",(0,a.jsx)(s.code,{children:"BaseSchema"})," class is decorated with ",(0,a.jsx)(s.code,{children:"@OasSchema"})," and includes the ",(0,a.jsx)(s.code,{children:"foo"})," property decorated with ",(0,a.jsx)(s.code,{children:"@OasSchemaProperty"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Extended Schema"}),": The ",(0,a.jsx)(s.code,{children:"ExtendedSchema"})," class:"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["Extends ",(0,a.jsx)(s.code,{children:"BaseSchema"})," using TypeScript inheritance (",(0,a.jsx)(s.code,{children:"extends BaseSchema"}),")"]}),"\n",(0,a.jsxs)(s.li,{children:["Uses ",(0,a.jsx)(s.code,{children:"@OasSchema((toSchema: ToSchemaFunction) => toSchema(BaseSchema))"})," to reference the base schema in the OpenAPI specification"]}),"\n",(0,a.jsxs)(s.li,{children:["Adds additional properties (",(0,a.jsx)(s.code,{children:"bar"})," and ",(0,a.jsx)(s.code,{children:"count"}),") with their own ",(0,a.jsx)(s.code,{children:"@OasSchemaProperty"})," decorators"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"OpenAPI Generation"}),": This generates an OpenAPI schema where:"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"The base schema is defined with its properties"}),"\n",(0,a.jsxs)(s.li,{children:["The extended schema uses ",(0,a.jsx)(s.code,{children:"allOf"})," with a reference (",(0,a.jsx)(s.code,{children:"$ref"}),") to the base schema"]}),"\n",(0,a.jsx)(s.li,{children:"The extended schema includes its own properties in addition to the inherited ones"}),"\n"]}),"\n"]}),"\n"]})]})}function m(e={}){let{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);