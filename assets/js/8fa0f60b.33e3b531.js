"use strict";(self.webpackChunk_inversifyjs_framework_docs_site=self.webpackChunk_inversifyjs_framework_docs_site||[]).push([["3985"],{937:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>l,toc:()=>d,default:()=>p,metadata:()=>o,assets:()=>c,contentTitle:()=>g});var o=JSON.parse('{"id":"ecosystem/logger","title":"Logger","description":"@inversifyjs/logger is a versatile and extensible logging library designed for TypeScript applications. It provides a simple and consistent API for logging messages at various levels (e.g., info, warn, error) and supports multiple logging transports, including console, file, http and stream logging.","source":"@site/docs/ecosystem/logger.mdx","sourceDirName":"ecosystem","slug":"/ecosystem/logger","permalink":"/framework/docs/ecosystem/logger","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Logger"},"sidebar":"httpSidebar","previous":{"title":"Container Modules","permalink":"/framework/docs/ecosystem/better-auth/api/container-modules"},"next":{"title":"Open API","permalink":"/framework/docs/ecosystem/open-api"}}'),i=s(6820),t=s(7588),r=s(5340),a=s(424);let l={sidebar_position:2,title:"Logger"},g,c={},d=[{value:"Using a logger",id:"using-a-logger",level:3}];function m(e){let n={admonition:"admonition",code:"code",h3:"h3",p:"p",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"@inversifyjs/logger"})," is a versatile and extensible logging library designed for TypeScript applications. It provides a simple and consistent API for logging messages at various levels (e.g., info, warn, error) and supports multiple logging transports, including console, file, http and stream logging."]}),"\n",(0,i.jsx)(n.h3,{id:"using-a-logger",children:"Using a logger"}),"\n",(0,i.jsx)(n.p,{children:"To use a logger in your application, just import the desired logger class and create an instance:"}),"\n",(0,i.jsx)(r.A,{language:"ts",children:"import { ConsoleLogger, Logger } from '@inversifyjs/logger';\nimport { inject, injectable } from 'inversify';\n\n@injectable()\nexport class MyAwesomeService {\n  readonly #logger: Logger;\n  readonly #myAwesomeDependency: MyAwesomeDependency;\n\n  constructor(\n    @inject(MyAwesomeDependency)\n    myAwesomeDependency: MyAwesomeDependency,\n  ) {\n    this.#logger = new ConsoleLogger('MyAwesomeService');\n    this.#myAwesomeDependency = myAwesomeDependency;\n  }\n\n  public doSomethingAwesome() {\n    this.#logger.info('Doing something awesome!');\n    this.#myAwesomeDependency.doSomething();\n  }\n}\n"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"You might be tempted to use DI to inject the logger, but this is not recommended. Reading context in the log traces such as the name of the module which sends the logs is useful, and having a shared instance of the logger would make this impossible."})}),"\n",(0,i.jsx)(a.A,{href:"/logger/introduction/getting-started/",target:"_blank",children:(0,i.jsx)("span",{children:"View Full Documentation"})})]})}function p(e={}){let{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},424:function(e,n,s){s.d(n,{A:()=>t});var o=s(6820),i=s(9550);s(5080);function t({href:e,children:n,target:s}){return(0,o.jsx)("div",{className:"buttonContainer_jyGP",children:(0,o.jsxs)(i.A,{to:e,target:s,rel:"noopener noreferrer",className:"documentationButton_Sex6",children:[(0,o.jsx)("span",{className:"buttonText_NSOW",children:n}),(0,o.jsx)("span",{className:"buttonIcon_fV4z",children:"\uD83D\uDCD6"}),(0,o.jsx)("div",{className:"shimmer_GGMR"})]})})}}}]);