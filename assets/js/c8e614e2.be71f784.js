"use strict";(self.webpackChunk_inversifyjs_framework_docs_site=self.webpackChunk_inversifyjs_framework_docs_site||[]).push([["4238"],{558:function(e){e.exports=JSON.parse('{"version":{"pluginId":"openapi","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"openApiSidebar":[{"type":"category","label":"Introduction","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/framework/openapi/introduction/getting-started","label":"Getting started","docId":"introduction/getting-started","unlisted":false},{"type":"link","href":"/framework/openapi/introduction/philosophy","label":"Philosophy","docId":"introduction/philosophy","unlisted":false}]},{"type":"category","label":"API","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/framework/openapi/api/decorators","label":"Decorator","docId":"api/decorators","unlisted":false},{"type":"link","href":"/framework/openapi/api/swagger-ui-provider","label":"SwaggerUiProvider","docId":"api/swagger-ui-provider","unlisted":false}]},{"type":"category","label":"FAQ","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/framework/openapi/faq/extending-class-schemas","label":"Extending class schemas","docId":"faq/extending-class-schemas","unlisted":false}]}]},"docs":{"api/decorators":{"id":"api/decorators","title":"Decorator","description":"This section covers Inversify HTTP OpenAPI decorators used to provide OpenAPI metadata to your controllers and operations.","sidebar":"openApiSidebar"},"api/swagger-ui-provider":{"id":"api/swagger-ui-provider","title":"SwaggerUiProvider","description":"The SwaggerUiProvider is an abstract class that generates and provides Swagger UI documentation for your HTTP controllers. It automatically scans your controllers and their OpenAPI metadata to build a complete OpenAPI 3.1 specification and serves it through a Swagger UI interface.","sidebar":"openApiSidebar"},"faq/extending-class-schemas":{"id":"faq/extending-class-schemas","title":"Extending class schemas","description":"When working with OpenAPI schemas in InversifyJS HTTP, you might need to create schemas that extend from a base schema. This is useful for creating inheritance hierarchies where child schemas include all properties from a parent schema plus additional properties.","sidebar":"openApiSidebar"},"introduction/getting-started":{"id":"introduction/getting-started","title":"Getting started","description":"Install dependencies","sidebar":"openApiSidebar"},"introduction/philosophy":{"id":"introduction/philosophy","title":"Philosophy","description":"The InversifyJS OpenAPI HTTP library is built on several core principles that prioritize OpenAPI 3.1 specification compliance, class-based API contracts, and developer experience. This document outlines the design decisions and philosophies that guide the development of this library.","sidebar":"openApiSidebar"}}}}')}}]);